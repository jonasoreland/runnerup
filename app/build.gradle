apply plugin: 'com.android.application'

import java.util.regex.Pattern

def doExtractStringFromManifest(name) {
    def manifestFile = file(android.sourceSets.main.manifest.srcFile)
    def pattern = Pattern.compile(name + "=\"(.*?)\"")
    def matcher = pattern.matcher(manifestFile.getText())
    matcher.find()
    return matcher.group(1)
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !travisBuild
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        froyo {
            manifest.srcFile 'froyo/AndroidManifest.xml'
            java.srcDirs = ['froyo/java']
        }
        latest {
            manifest.srcFile 'latest/AndroidManifest.xml'
            java.srcDirs = ['latest/java']
            assets.srcDirs = ['latest/assets']
        }
        test.setRoot('test')
    }

    flavorDimensions "all"
    productFlavors {
        latest {
            dimension "all"
            minSdkVersion 15
            targetSdkVersion rootProject.ext.compileSdkVersion
            versionName rootProject.ext.versionName
            versionCode 14000000 + rootProject.ext.versionCode
        }
        froyo {
            dimension "all"
            minSdkVersion 8
            targetSdkVersion rootProject.ext.targetSdkVersion
            versionName rootProject.ext.versionName
            versionCode 8000000 + rootProject.ext.versionCode
        }
    }

    splits {
        abi {
            //We would have preferred to not create split for Froyo, so explicitly enabling split
            //.\gradlew --project-prop splitApk assembleLatestRelease
            enable project.hasProperty('splitApk')
            exclude 'mips64'
            universalApk true
        }
    }

    defaultConfig {
        applicationId = doExtractStringFromManifest("package")
        //By default all AppCompat translations are included, saves 350KB
        resConfigs "ar", "bs", "cs", "ca", "de", "en", "es", "fi", "fr", "hu", "id", "it", "ja", "lt", "nb", "nl", "pl", "pt", "ru", "sv", "tr"
    }

    signingConfigs {
        //noinspection GroovyMissingReturnStatement
        release {
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.txt'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        //disable specific checks for specific paths
        lintConfig file("lint.xml")
        baseline file("lint-baseline.xml")
        checkReleaseBuilds true
        //promote to error, must be handled
        fatal 'InlinedApi', 'InconsistentArrays'
        //Remove with AS3: https://issuetracker.google.com/issues/37131435
        warning 'GradleCompatible'
        // Ignore some specific checks completely
        //All translations will not be complete
        ignore 'MissingTranslation'
        //icon with all densities are not included - don't bother
        ignore 'IconMissingDensityFolder'
        //apply() is supported from SDK 9, but min version is 8
        ignore 'ApplySharedPref'
        //Support lib > 25.0.1 _sometimes_ raises this issue. Should be fixed though
        warning 'RestrictedApi'

        showAll true
        //debug issues in Travis
        textReport true
        textOutput 'stdout'
    }
}

repositories {
    maven {
        url "https://maven.google.com"
    }
    //jcenter and mavenCentral normally have the same packages but there may be a delay after updating the primary
    jcenter()
    mavenCentral() //MapBox GraphView
    maven { url "https://oss.sonatype.org/content/groups/public/" } //pebblekit
}

dependencies {
    compile project(':common')
    compile project(':hrdevice')
    latestWearApp project(':wear')

    latestCompile "com.android.support:design:${rootProject.ext.supportLibrary}"

    //Lint bug: https://issuetracker.google.com/issues/37131433
    //noinspection GradleDependency
    froyoCompile 'com.android.support:design:24.1.0' //SDK <10 dropped in 24.2

    latestCompile "com.google.android.gms:play-services-wearable:${rootProject.ext.googlePlayServicesVersion}"
    latestCompile 'com.getpebble:pebblekit:4.0.1'
    latestCompile ('com.mapbox.mapboxsdk:mapbox-android-sdk:5.1.1@aar'){
        transitive=true
    }
    compile 'com.jjoe64:graphview:4.2.1'


    testCompile "junit:junit:${rootProject.ext.junitVersion}"
    testCompile "org.mockito:mockito-core:${rootProject.ext.mockitoVersion}"
}

allprojects {
    tasks.withType(JavaCompile) {
        // options.compilerArgs << "-Xlint:deprecation";
        options.compilerArgs << "-Xlint:unchecked"
    }
}

def props = new Properties()
if (rootProject.file("release.properties").exists()) {
    props.load(new FileInputStream(rootProject.file("release.properties")))

    android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
    android.signingConfigs.release.storePassword props.keyStorePassword
    android.signingConfigs.release.keyAlias props.keyAlias
    android.signingConfigs.release.keyPassword props.keyAliasPassword
} else {
    project.logger.info('INFO: Set the values storeFile, storePassword, keyAlias, and keyPassword in release.properties to sign the release.')
    android.buildTypes.release.signingConfig = null
}

android.applicationVariants.all { variant ->
    variant.mergeResources.doLast {
        if (rootProject.file("mapbox.properties").exists()) {
            props.load(new FileInputStream(rootProject.file("mapbox.properties")))
            File valuesFile = file("${buildDir}/intermediates/res/merged/${variant.dirName}/values/values.xml")
            String content = valuesFile.getText('UTF-8')
            content = content.replaceAll(/mapboxMapID.*/, "mapboxMapID\">" + props.mapboxid + "</string>")
            content = content.replaceAll(/mapboxAccessToken.*/, "mapboxAccessToken\">" + props.mapboxAccessToken + "</string>")
            valuesFile.write(content, 'UTF-8')
        }
    }
}

//Based on an example from https://developer.android.com/studio/build/configure-apk-splits.html
//Most comments from there removed

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['arm64-v8a': 1, 'armeabi':2, 'armeabi-v7a':3, 'mips':4, 'mips64':5, 'x86':6, 'x86_64':7]

import com.android.build.OutputFile

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 10000 + variant.versionCode. (universal gets no offset)
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode =
                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        if (baseAbiVersionCode != null) {
            output.versionCodeOverride =
                    baseAbiVersionCode * 10000 + variant.versionCode
        }
    }
}