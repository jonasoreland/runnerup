apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion '23.0.1'

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        froyo {
            manifest.srcFile 'froyo/AndroidManifest.xml'
            java.srcDirs = ['froyo/java']
        }
        latest {
            manifest.srcFile 'latest/AndroidManifest.xml'
            java.srcDirs = ['latest/java']
        }
        test.setRoot('test')
    }

    productFlavors {
        latest {
            minSdkVersion 14
            targetSdkVersion 22
            versionName "1.53"
            versionCode 14000053
        }
        froyo {
            minSdkVersion 8
            targetSdkVersion 22
            versionName "1.53"
            versionCode 8000053
        }
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFile 'proguard.txt'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        fatal 'NewApi'
        warning 'InvalidPackage'
        disable 'MissingTranslation'

        ignoreWarnings true
        textReport true
        showAll true
    }
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/groups/public/" }
}

dependencies {
    compile 'com.android.support:appcompat-v7:22.1.0'
    latestCompile 'com.google.android.gms:play-services:6.1.11'
    latestCompile 'com.getpebble:pebblekit:3.0.0'
    compile('com.mapbox.mapboxsdk:mapbox-android-sdk:0.7.4@aar') {
        transitive = true
    }
    compile files('../GraphView/public/graphview-3.1.jar')
    compile project(':common')
    compile project(':hrdevice')
    latestWearApp project(':wear')
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

allprojects {
    tasks.withType(JavaCompile) {
        // options.compilerArgs << "-Xlint:deprecation";
        options.compilerArgs << "-Xlint:unchecked"
    }
}

def props = new Properties()
if (rootProject.file("release.properties").exists()) {
    props.load(new FileInputStream(rootProject.file("release.properties")))

    android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
    android.signingConfigs.release.storePassword props.keyStorePassword
    android.signingConfigs.release.keyAlias props.keyAlias
    android.signingConfigs.release.keyPassword props.keyAliasPassword
} else {
    project.logger.warn('WARN: Set the values storeFile, storePassword, keyAlias, and keyPassword in release.properties to sign the release.')
    android.buildTypes.release.signingConfig = null
}

android.applicationVariants.all{ variant ->
    variant.mergeResources.doLast{
        if (rootProject.file("mapbox.properties").exists()) {
            props.load(new FileInputStream(rootProject.file("mapbox.properties")))
            File valuesFile = file("${buildDir}/intermediates/res/merged/${variant.dirName}/values/values.xml")
            String content = valuesFile.getText('UTF-8')
            content = content.replaceAll(/mapboxMapID.*/, "mapboxMapID\">" + props.mapboxid + "</string>")
            content = content.replaceAll(/mapboxAccessToken.*/, "mapboxAccessToken\">" + props.mapboxAccessToken + "</string>")
            valuesFile.write(content, 'UTF-8')
        }
    }
}
