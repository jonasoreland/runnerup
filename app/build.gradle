apply plugin: 'com.android.application'

import java.util.regex.Pattern

def doExtractStringFromManifest(name) {
    def manifestFile = file(android.sourceSets.main.manifest.srcFile)
    def pattern = Pattern.compile(name + "=\"(.*?)\"")
    def matcher = pattern.matcher(manifestFile.getText())
    matcher.find()
    return matcher.group(1)
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !travisBuild
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        froyo {
            manifest.srcFile 'froyo/AndroidManifest.xml'
            java.srcDirs = ['froyo/java']
        }
        latest {
            manifest.srcFile 'latest/AndroidManifest.xml'
            java.srcDirs = ['latest/java']
        }
        test.setRoot('test')
    }

    productFlavors {
        latest {
            minSdkVersion 15
            targetSdkVersion rootProject.ext.compileSdkVersion
            versionName rootProject.ext.versionName
            versionCode rootProject.ext.versionCode
        }
        froyo {
            minSdkVersion 8
            targetSdkVersion rootProject.ext.targetSdkVersion
            versionName rootProject.ext.versionName
            versionCode rootProject.ext.froyoVersionCode
        }
    }

    defaultConfig {
        applicationId = doExtractStringFromManifest("package")
        //By default all AppCompat translations are included, saves 350KB
        resConfigs "ar","ca","de","en","es","fr","hu","id","it","ja","lt","nl","pl","pt","ru","sv","tr"
    }

    signingConfigs {
        //noinspection GroovyMissingReturnStatement
        release {
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.txt'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        //disable specific checks for specific paths
        lintConfig file("lint.xml")
        checkReleaseBuilds true
        //promote to error
        fatal 'InlinedApi'
        //Should be enabled, see PR #333
        warning 'MissingQuantity','ImpliedQuantity'
        // Ignore some specific checks, also some specific with path in lint.xml
        warning 'MissingTranslation'
        showAll true
    }
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/groups/public/" }
}

dependencies {
    //design uses com.android.support:appcompat, not explicitly required
    compile 'com.android.support:design:24.1.1'
    latestCompile 'com.google.android.gms:play-services-wearable:9.4.0'
    latestCompile 'com.getpebble:pebblekit:3.0.0'
    latestCompile ('com.mapbox.mapboxsdk:mapbox-android-sdk:4.1.1@aar'){
        transitive=true
    }
    compile files('../GraphView/public/graphview-3.1.jar')
    compile project(':common')
    compile project(':hrdevice')
    latestWearApp project(':wear')
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

allprojects {
    tasks.withType(JavaCompile) {
        // options.compilerArgs << "-Xlint:deprecation";
        options.compilerArgs << "-Xlint:unchecked"
    }
}

def props = new Properties()
if (rootProject.file("release.properties").exists()) {
    props.load(new FileInputStream(rootProject.file("release.properties")))

    android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
    android.signingConfigs.release.storePassword props.keyStorePassword
    android.signingConfigs.release.keyAlias props.keyAlias
    android.signingConfigs.release.keyPassword props.keyAliasPassword
} else {
    project.logger.info('INFO: Set the values storeFile, storePassword, keyAlias, and keyPassword in release.properties to sign the release.')
    android.buildTypes.release.signingConfig = null
}

android.applicationVariants.all{ variant ->
    variant.mergeResources.doLast{
        if (rootProject.file("mapbox.properties").exists()) {
            props.load(new FileInputStream(rootProject.file("mapbox.properties")))
            File valuesFile = file("${buildDir}/intermediates/res/merged/${variant.dirName}/values/values.xml")
            String content = valuesFile.getText('UTF-8')
            content = content.replaceAll(/mapboxMapID.*/, "mapboxMapID\">" + props.mapboxid + "</string>")
            content = content.replaceAll(/mapboxAccessToken.*/, "mapboxAccessToken\">" + props.mapboxAccessToken + "</string>")
            valuesFile.write(content, 'UTF-8')
        }
    }
}
