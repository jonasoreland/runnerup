apply plugin: 'com.android.application'

import java.util.regex.Pattern

def doExtractStringFromManifest(name) {
    def manifestFile = file(android.sourceSets.main.manifest.srcFile)
    def pattern = Pattern.compile(name + "=\"(.*?)\"")
    def matcher = pattern.matcher(manifestFile.getText())
    matcher.find()
    return matcher.group(1)
}

android {
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !travisBuild
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        froyo {
            manifest.srcFile 'froyo/AndroidManifest.xml'
            java.srcDirs = ['froyo/java']
        }
        latest {
            manifest.srcFile 'latest/AndroidManifest.xml'
            java.srcDirs = ['latest/java']
            res.srcDirs = ['latest/res']
            assets.srcDirs = ['latest/assets']
        }
        test.setRoot('test')
    }

    flavorDimensions "all"
    productFlavors {
        latest {
            dimension "all"
            minSdkVersion 15
            compileSdkVersion rootProject.ext.compileSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            versionName rootProject.ext.versionName
            versionCode 14000000 + rootProject.ext.versionCode
        }
        froyo {
            dimension "all"
            minSdkVersion 8
            compileSdkVersion rootProject.ext.compileSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            versionName rootProject.ext.versionName
            versionCode 8000000 + rootProject.ext.versionCode
        }
    }

    splits {
        abi {
            enable gradle.startParameter.taskNames.contains("assembleLatestRelease")
            // relevant archs only - these are the only available anyway for newer NDK
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

    defaultConfig {
        applicationIdSuffix rootProject.ext.applicationIdSuffix
        applicationId = doExtractStringFromManifest("package")
        vectorDrawables.useSupportLibrary = true
        //By default all AppCompat translations are included, saves 350KB
        resConfigs "ar", "bs", "cs", "ca", "de", "en", "es", "fa", "fi", "fr", "hu", "id", "it", "ja", "lt", "nb", "nl", "pl", "pt", "ru", "sv", "tr"
    }

    signingConfigs {
        //noinspection GroovyMissingReturnStatement
        release {
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".${applicationIdSuffix}.debug"
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.txt'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        //Configure checks with paths
        lintConfig file("lint.xml")
        baseline file("lint-baseline.xml")
        checkReleaseBuilds true

        showAll true
        //debug issues in Travis
        textReport true
        textOutput 'stdout'
    }
}

repositories {
    google()
    jcenter()
    mavenCentral() //MapBox GraphView
    maven { url "https://oss.sonatype.org/content/groups/public/" } //pebblekit
}

dependencies {
    implementation project(':common')
    implementation project(':hrdevice')
    latestWearApp project(':wear')

    latestImplementation "com.android.support:design:${rootProject.ext.supportLibrary}"
    //Lint bug: https://issuetracker.google.com/issues/231321
    //noinspection GradleDependency
    froyoImplementation 'com.android.support:design:24.1.0' //SDK <10 dropped in 24.2

    latestImplementation "com.android.support:cardview-v7:${rootProject.ext.supportLibrary}"
    latestImplementation "com.google.android.gms:play-services-wearable:${rootProject.ext.googlePlayServicesVersion}"
    latestImplementation 'com.getpebble:pebblekit:4.0.1'
    latestImplementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:6.8.1'
    latestImplementation 'com.jjoe64:graphview:4.2.2'
    froyoImplementation 'com.jjoe64:graphview:4.2.1'

    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoVersion}"
}

allprojects {
    tasks.withType(JavaCompile) {
        // options.compilerArgs << "-Xlint:deprecation";
        options.compilerArgs << "-Xlint:unchecked"
    }
}

def props = new Properties()
if (rootProject.file("release.properties").exists()) {
    props.load(new FileInputStream(rootProject.file("release.properties")))

    android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
    android.signingConfigs.release.storePassword props.keyStorePassword
    android.signingConfigs.release.keyAlias props.keyAlias
    android.signingConfigs.release.keyPassword props.keyAliasPassword
} else {
    project.logger.info('INFO: Set the values storeFile, storePassword, keyAlias, and keyPassword in release.properties to sign the release.')
    android.buildTypes.release.signingConfig = null
}

android.applicationVariants.all {
    // Note: As a minimum extra security at least obfuscate the strings with Proguard
    if (rootProject.file("mapbox.properties").exists()) {
        // https://www.mapbox.com/account/
        props.load(new FileInputStream(rootProject.file("mapbox.properties")))
        buildConfigField 'String', 'MAPBOX_ACCESS_TOKEN', props.mapboxAccessToken
    }
    else {
        // Demo key
        buildConfigField 'String', 'MAPBOX_ACCESS_TOKEN', '"pk.eyJ1IjoiY3FucXJkIiwiYSI6ImJmYjcxNDkyZjJiNzllMzYxYjA0NjA1YTI0Mzg4ODA4In0.N9lbcSp06JqIpFSP5X44Fw"'
    }

    if (rootProject.file("runalyze.properties").exists()) {
        props.load(new FileInputStream(rootProject.file("runalyze.properties")))
        buildConfigField 'int', 'RUNALYZE_ENABLED', "1"
        buildConfigField 'String', 'RUNALYZE_ID', props.CLIENT_ID
        buildConfigField 'String', 'RUNALYZE_SECRET', props.CLIENT_SECRET
    }
    else {
        // Demo, used to testing.runalyze.com
        buildConfigField 'int', 'RUNALYZE_ENABLED', "0"
        buildConfigField 'String', 'RUNALYZE_ID', "\"8_2jx5jt9r39ic40ooc80c8c0884okgk0owsowg808c4csg8ko8g\""
        buildConfigField 'String', 'RUNALYZE_SECRET', "\"1v7d6nwe1v9c8skok44g0gc8cc04cc0wwwo8swwgckoogwsww4\""
    }

    if (rootProject.file("dropbox.properties").exists()) {
        props.load(new FileInputStream(rootProject.file("dropbox.properties")))
        buildConfigField 'int', 'DROPBOX_ENABLED', "1"
        buildConfigField 'String', 'DROPBOX_ID', props.CLIENT_ID
        buildConfigField 'String', 'DROPBOX_SECRET', props.CLIENT_SECRET
    }
    else {
        buildConfigField 'int', 'DROPBOX_ENABLED', "0"
        buildConfigField 'String', 'DROPBOX_ID', "null"
        buildConfigField 'String', 'DROPBOX_SECRET', "null"
    }
}

//Based on an example from https://developer.android.com/studio/build/configure-apk-splits.html
//Most comments from there removed

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['arm64-v8a': 1, 'armeabi':2, 'armeabi-v7a':3, 'mips':4, 'mips64':5, 'x86':6, 'x86_64':7]

import com.android.build.OutputFile

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 10000 + variant.versionCode. (universal gets no offset)
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode =
                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        if (baseAbiVersionCode != null) {
            output.versionCodeOverride =
                    baseAbiVersionCode * 10000 + variant.versionCode
        }
    }
}
